{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.type';\nimport { firestore, convertCollectionsSnapchotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.types';\nexport function* fetchCollectionAsync() {\n  const collectionRef = firestore.collection('collections');\n  const snapshot = yield colletionRef.get(); // collectionRef.get().then( snapshot => {\n  // \tconst collectionsMap = convertCollectionsSnapchotToMap(snapshot);\n  // \tdispatch(fetchCollectionsSuccess(collectionsMap));\n  // }).catch(error=> dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["/Users/noe/vagrant-lamp/sites/online-store/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","firestore","convertCollectionsSnapchotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionAsync","collectionRef","collection","snapshot","colletionRef","get","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,OAAOC,eAAP,MAA6B,aAA7B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,cAAjE;AAGA,OAAO,UAAUC,oBAAV,GAAgC;AACtC,QAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,QAAMC,QAAQ,GAAG,MAAMC,YAAY,CAACC,GAAb,EAAvB,CAFsC,CAGrC;AACA;AACA;AACA;AACD;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACvC,QAAMZ,SAAS,CAACC,eAAe,CAACY,uBAAjB,EAA0CP,oBAA1C,CAAf;AACA","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes  from './shop.type';\nimport { firestore, convertCollectionsSnapchotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.types';\n\n\nexport function* fetchCollectionAsync(){\n\tconst collectionRef = firestore.collection('collections');\n\tconst snapshot = yield colletionRef.get();\n\t\t// collectionRef.get().then( snapshot => {\n\t\t// \tconst collectionsMap = convertCollectionsSnapchotToMap(snapshot);\n\t\t// \tdispatch(fetchCollectionsSuccess(collectionsMap));\n\t\t// }).catch(error=> dispatch(fetchCollectionsFailure(error.message)));\n}\n\nexport function* fetchCollectionsStart(){\n\tyield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}"]},"metadata":{},"sourceType":"module"}