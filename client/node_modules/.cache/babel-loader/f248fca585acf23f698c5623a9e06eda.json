{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.type';\nimport { firestore, convertCollectionsSnapchotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.types';\nexport function* fetchCollectionAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield colletionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapchotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } //old way //\n  // collectionRef.get().then( snapshot => {\n  // \tconst collectionsMap = convertCollectionsSnapchotToMap(snapshot);\n  // \tdispatch(fetchCollectionsSuccess(collectionsMap));\n  // }).catch(error=> dispatch(fetchCollectionsFailure(error.message)));\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["/Users/noe/vagrant-lamp/sites/online-store/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","put","ShopActionTypes","firestore","convertCollectionsSnapchotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionAsync","collectionRef","collection","snapshot","colletionRef","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,OAAOC,eAAP,MAA6B,aAA7B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,cAAjE;AAGA,OAAO,UAAUC,oBAAV,GAAgC;AACtC,MAAG;AACF,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMC,YAAY,CAACC,GAAb,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAACI,+BAAD,EAAkCM,QAAlC,CAAjC;AACA,UAAMT,GAAG,CAACI,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;AACA,GALD,CAKC,OAAOC,KAAP,EAAa;AACb,UAAMb,GAAG,CAACK,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACA,GARqC,CAUtC;AACC;AACA;AACA;AACA;;AACD;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACvC,QAAMjB,SAAS,CAACG,eAAe,CAACe,uBAAjB,EAA0CV,oBAA1C,CAAf;AACA","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\nimport ShopActionTypes  from './shop.type';\nimport { firestore, convertCollectionsSnapchotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.types';\n\n\nexport function* fetchCollectionAsync(){\n\ttry{\n\t\tconst collectionRef = firestore.collection('collections');\n\t\tconst snapshot = yield colletionRef.get();\n\t\tconst collectionsMap = yield call(convertCollectionsSnapchotToMap, snapshot);\n\t\tyield put(fetchCollectionsSuccess(collectionsMap));\n\t}catch (error){\n\t\tyield put(fetchCollectionsFailure(error.message));\n\t}\n\t\n\t//old way //\n\t\t// collectionRef.get().then( snapshot => {\n\t\t// \tconst collectionsMap = convertCollectionsSnapchotToMap(snapshot);\n\t\t// \tdispatch(fetchCollectionsSuccess(collectionsMap));\n\t\t// }).catch(error=> dispatch(fetchCollectionsFailure(error.message)));\n}\n\nexport function* fetchCollectionsStart(){\n\tyield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}"]},"metadata":{},"sourceType":"module"}